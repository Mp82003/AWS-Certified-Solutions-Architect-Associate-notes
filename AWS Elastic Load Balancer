# AWS Elastic Load Balancing (ELB) - Study Notes
*For AWS Certified Solutions Architect Exam*

## Overview

**Elastic Load Balancing (ELB)** is an AWS service that distributes incoming application traffic across multiple targets including:
- EC2 instances
- Containers
- IP addresses

### Key Benefits
- **Increased Availability & Reliability**: Protects against single points of failure
- **Improved Performance**: Routes traffic to closest targets, reducing latency
- **Reduced Cost**: Auto-scaling based on demand prevents over-provisioning
- **Increased Scalability**: Easy addition/removal of targets
- **Easier Management**: Single point of control for traffic distribution

## How ELB Works

1. **Client Request**: Client sends request to application
2. **ELB Reception**: Request first reaches the ELB (single point of contact)
3. **Health Checks**: ELB performs health checks on registered instances
4. **Load Balancing Algorithm**: Determines which healthy instance receives request
5. **Request Forwarding**: ELB forwards request to selected instance
6. **Response Processing**: Instance processes request and sends response back
7. **Response Forwarding**: ELB forwards response back to client

### Health Checks
- Verify instances are responding properly
- Ensure instances are capable of serving requests
- Unhealthy instances automatically removed from rotation

### Load Balancing Algorithms
- **Round Robin**
- **Least Outstanding Request**
- **IP Hash-based**

## Types of Load Balancers

### 1. Classic Load Balancer (CLB) ⚠️
- **Layer**: Layer 4 (Transport Layer)
- **Status**: Original ELB service, still supported but NOT recommended
- **Routing**: Based on IP addresses and port information
- **Use Case**: Simple TCP or SSL traffic balancing
- **Exam Note**: CLB has no weight in current AWS exams - focus on ALB and NLB

### 2. Network Load Balancer (NLB)
- **Layer**: Layer 4 (Transport Layer)
- **Protocols**: TCP, UDP, TLS
- **Performance**: High performance, low latency, high throughput
- **Optimization**: Specifically optimized for TCP/UDP/TLS traffic

#### NLB Components:
- **Load Balancer**: Central component, single entry point
- **Target Groups**: Logical groupings of backend instances (EC2, IP addresses, Lambda)
- **Listeners**: Receive and route connections based on protocol and port

### 3. Application Load Balancer (ALB) ⭐
- **Layer**: Layer 7 (Application Layer)
- **Protocols**: HTTP, HTTPS
- **Intelligence**: Makes routing decisions based on HTTP/HTTPS request content
- **Session Stickiness**: Supports binding user sessions to specific targets

#### ALB Components:
- **Load Balancer**: Operates at application layer for intelligent routing
- **Target Groups**: Route requests to EC2 instances, IP addresses, containers, or Lambda
- **Listeners**: Support HTTP/HTTPS protocols and port numbers
- **Rules**: ⚠️ UNIQUE TO ALB - Advanced routing based on:
  - URL paths
  - Host names
  - Header values

#### ALB Advanced Features:
- Content-based routing
- Header inspection
- Dynamic target registration
- Microservices architecture support

### 4. Gateway Load Balancer (GWLB)
- **Layer**: Layer 3 (Network Layer)
- **Purpose**: Load balancing for third-party virtual appliances
- **Function**: Entry/exit point for VPC traffic

#### GWLB Components:
- **Load Balancer**: Central component for VPC traffic entry/exit
- **Target Groups**: Logical groupings of virtual appliances
- **Listeners**: Support TCP/UDP protocols
- **Virtual Appliances**: Third-party network functions including:
  - Firewalls
  - Intrusion Detection/Prevention Systems (IDPS)
  - Deep Packet Inspection (DPI) systems
  - Security/monitoring tools
- **Endpoints**: IP address or DNS serving as entry point for traffic

## Exam Tips & Key Points

### High-Priority for Exam:
1. **ALB vs NLB**: Know when to use each
   - ALB: Layer 7, HTTP/HTTPS, content-based routing
   - NLB: Layer 4, TCP/UDP/TLS, high performance
2. **ALB Rules**: Only ALB has advanced routing rules
3. **Target Groups**: All modern ELBs use target groups
4. **Health Checks**: Critical for high availability
5. **Session Stickiness**: ALB feature for maintaining user sessions

### Remember:
- Classic Load Balancer is legacy - focus on ALB/NLB
- Gateway Load Balancer is for third-party virtual appliances
- ELB provides automatic scaling and high availability
- All traffic is encrypted using SSL/TLS

### Common Exam Scenarios:
- **Web Applications**: Use ALB for HTTP/HTTPS traffic
- **High Performance/Gaming**: Use NLB for TCP/UDP
- **Microservices**: Use ALB with advanced routing rules
- **Security Appliances**: Use GWLB for third-party tools

How It Works
Load Balancer Nodes: ELB has load balancer nodes in each AZ
Traffic Distribution: Each node can route traffic to instances in ANY AZ
Fault Tolerance: If one AZ becomes unavailable, traffic continues to other AZs
Even Distribution: Ensures balanced load across all registered instances regardless of AZ
Architecture Example
AZ-A: ELB Node → Can route to instances in AZ-A OR AZ-B
AZ-B: ELB Node → Can route to instances in AZ-A OR AZ-B

Benefits ✅
Improved Availability: Protects against single AZ failure
Better Performance: Routes traffic to closest/healthiest instances
Reduced Cost: Prevents over-provisioning through better resource utilization
Fault Tolerance: Application remains available even if entire AZ goes down

Limitations ⚠️
Increased Complexity: Must ensure EC2 instances are distributed across multiple AZs
Higher Costs: Pay for ELB nodes and EC2 instances in multiple AZs
Cross-AZ Data Transfer: May incur additional data transfer charges

Exam Key Points
Default Behavior: Varies by load balancer type
ALB: Cross-zone load balancing is ALWAYS enabled (cannot be disabled)
NLB: Cross-zone load balancing is DISABLED by default (can be enabled)
CLB: Cross-zone load balancing is DISABLED by default (can be enabled)
Common Exam Scenarios:
Web Applications: Use ALB for HTTP/HTTPS traffic
High Performance/Gaming: Use NLB for TCP/UDP
Microservices: Use ALB with advanced routing rules
Security Appliances: Use GWLB for third-party tools
Multi-AZ High Availability: Enable cross-zone load balancing for better fault tolerance

# AWS Cross-Zone Load Balancing - Solution Architect Associate Notes

## What is Cross-Zone Load Balancing?

**Definition:** Feature of AWS Elastic Load Balancer that distributes traffic evenly across all registered targets in all enabled Availability Zones, regardless of which AZ the traffic originated from.

**Purpose:** Prevents single AZ from becoming a bottleneck and ensures even traffic distribution across all healthy targets.

---

## How Cross-Zone Load Balancing Works

### Without Cross-Zone Load Balancing
```
Client Request → Load Balancer
                    ↓
         AZ-A (2 instances) | AZ-B (4 instances)
         50% traffic        | 50% traffic
         25% per instance   | 12.5% per instance
```
**Problem:** Uneven load distribution per instance

### With Cross-Zone Load Balancing
```
Client Request → Load Balancer
                    ↓
         AZ-A (2 instances) | AZ-B (4 instances)
         33.3% traffic      | 66.7% traffic
         16.7% per instance | 16.7% per instance
```
**Solution:** Even load distribution per instance across all AZs

---

## Load Balancer Type Behavior

### Application Load Balancer (ALB)
- **Cross-zone load balancing:** **ALWAYS ENABLED**
- **Cannot be disabled**
- **No additional charges** for cross-AZ data transfer
- **Default behavior** - evenly distributes across all targets

### Network Load Balancer (NLB) & Gateway Load Balancer (GWLB)
- **Cross-zone load balancing:** **DISABLED by default**
- **Can be enabled** at target group level
- **Additional charges apply** for cross-AZ data transfer
- **Pay for data processed** across AZs

### Classic Load Balancer (CLB) - Legacy
- **Cross-zone load balancing:** **DISABLED by default**
- **Can be enabled** at load balancer level
- **No additional charges** for cross-AZ data transfer
- **Being phased out** - use ALB/NLB instead

---

## Benefits of Cross-Zone Load Balancing

### 1. Improved Availability
- **Protection against AZ failures**
- **Continues operation** even if one AZ becomes unavailable
- **Automatic failover** to healthy AZs
- **Eliminates single point of failure** at AZ level

### 2. Better Performance
- **Even load distribution** across all instances
- **Prevents hotspots** from uneven instance distribution
- **Optimal resource utilization**
- **Consistent response times**

### 3. Enhanced Fault Tolerance
- **AZ-level isolation** protection
- **Graceful degradation** during AZ outages
- **Maintains service** during partial infrastructure failures

### 4. Simplified Architecture
- **Don't need equal instances** in each AZ
- **Flexibility in instance placement**
- **Automatic load balancing** without manual configuration

---

## Limitations and Considerations

### 1. Increased Cost (NLB/GWLB)
**Data Transfer Charges:**
- **Inter-AZ data transfer** costs apply
- **$0.01 per GB** processed across AZs (varies by region)
- **ALB is free** for cross-zone data transfer
- **Calculate costs** for high-traffic applications

### 2. Latency Considerations
- **Cross-AZ communication** may have higher latency
- **Network hops** between availability zones
- **Consider proximity** for latency-sensitive applications
- **Monitor performance** metrics

### 3. Architecture Complexity
- **Multi-AZ deployment** required
- **Network configuration** across AZs
- **Security group rules** must allow cross-AZ traffic
- **Monitoring** across multiple AZs

### 4. Regional Limitations
- **Single region only** - cannot span multiple regions
- **AZ availability** varies by region
- **Service limits** may apply

---

## Configuration Examples

### Enable Cross-Zone Load Balancing (NLB)

#### AWS Console:
1. Navigate to EC2 → Load Balancers
2. Select Network Load Balancer
3. Go to Target Groups
4. Edit Attributes
5. Enable "Cross-zone load balancing"

#### AWS CLI:
```bash
aws elbv2 modify-target-group-attributes \
    --target-group-arn arn:aws:elasticloadbalancing:region:account:targetgroup/name/id \
    --attributes Key=load_balancing.cross_zone.enabled,Value=true
```

#### CloudFormation:
```yaml
TargetGroup:
  Type: AWS::ElasticLoadBalancingV2::TargetGroup
  Properties:
    TargetGroupAttributes:
      - Key: load_balancing.cross_zone.enabled
        Value: true
```

---

## Common Exam Scenarios

### Scenario 1: Uneven Instance Distribution
**Question:** 2 instances in AZ-A, 6 instances in AZ-B. Traffic not evenly distributed.
**Answer:** Enable cross-zone load balancing to distribute traffic evenly across all 8 instances

### Scenario 2: AZ Failure Tolerance
**Question:** Application must continue working if one AZ fails
**Answer:** Deploy across multiple AZs with cross-zone load balancing enabled

### Scenario 3: Cost Optimization
**Question:** High data transfer charges with NLB
**Answer:** Evaluate if cross-zone load balancing is necessary; consider ALB for free cross-zone data transfer

### Scenario 4: Application Load Balancer Setup  
**Question:** Need to configure cross-zone load balancing for ALB
**Answer:** ALB has cross-zone load balancing always enabled - no configuration needed

### Scenario 5: Network Load Balancer Performance
**Question:** Some instances overloaded while others idle in NLB setup
**Answer:** Enable cross-zone load balancing in target group attributes

---

## Best Practices

### When to Enable Cross-Zone Load Balancing
- **Uneven instance distribution** across AZs
- **High availability requirements**
- **Consistent performance** needed
- **AZ-level fault tolerance** required

### When to Consider Disabling (NLB/GWLB)
- **Cost-sensitive** applications
- **Low inter-AZ latency** requirements
- **Even instance distribution** already maintained
- **Single AZ deployment** sufficient

### Architecture Recommendations
- **Use ALB** when possible for free cross-zone load balancing
- **Monitor data transfer costs** with NLB cross-zone enabled
- **Deploy instances** strategically across AZs
- **Test failover scenarios** regularly

### Monitoring and Metrics
- **CloudWatch metrics** for load distribution
- **Target health** across all AZs
- **Data transfer costs** monitoring
- **Response time analysis** by AZ

---

## Cost Analysis

### ALB Cross-Zone Load Balancing
```
Cost Impact: $0 additional
- No charges for cross-AZ data transfer
- Always enabled by default
- Most cost-effective for cross-zone requirements
```

### NLB Cross-Zone Load Balancing
```
Cost Components:
- Base NLB charges: $0.0225/hour
- Data processing: $0.006/GB
- Cross-AZ data transfer: $0.01/GB
- Calculate: (Traffic GB/month) × $0.01
```

### Cost Optimization Strategies
- **Use ALB** when layer 7 features acceptable
- **Monitor data transfer** with CloudWatch
- **Right-size instances** to reduce cross-AZ traffic
- **Consider regional architecture** for cost reduction

---

## Troubleshooting Common Issues

### Uneven Load Distribution
**Symptoms:** Some instances overloaded, others idle
**Solutions:**
- Verify cross-zone load balancing is enabled
- Check target health across all AZs
- Review instance capacity and scaling policies
- Monitor CloudWatch metrics for distribution

### High Data Transfer Costs
**Symptoms:** Unexpected charges in billing
**Solutions:**
- Review cross-zone load balancing necessity
- Consider switching to ALB if suitable
- Optimize application architecture
- Monitor data transfer patterns

### Latency Issues
**Symptoms:** Increased response times
**Solutions:**
- Monitor cross-AZ latency metrics
- Consider instance placement strategies
- Evaluate if cross-zone load balancing needed
- Test with/without cross-zone enabled

---

## Key Exam Points to Remember

### Critical Facts
- **ALB:** Cross-zone load balancing always enabled (free)
- **NLB/GWLB:** Cross-zone load balancing disabled by default (paid)
- **Even distribution:** Across all healthy targets regardless of AZ
- **AZ failure protection:** Continues operation if one AZ fails

### Decision Matrix
**Choose Cross-Zone Load Balancing when:**
- Uneven instance distribution across AZs
- High availability requirements
- Cost is not primary concern (for NLB)
- Consistent performance needed

**Skip Cross-Zone Load Balancing when:**
- Cost optimization is critical (NLB scenarios)
- Even instance distribution maintained
- Low latency requirements
- Single AZ deployment sufficient

### Common Exam Traps
- **Assuming all load balancers** have same cross-zone behavior
- **Missing cost implications** for NLB cross-zone data transfer
- **Confusing regional vs AZ** load distribution
- **Not considering ALB vs NLB** cost differences for cross-zone needs

# AWS Solutions Architect Associate Exam Notes
## Elastic Load Balancer (ELB) Stickiness

### Overview of Elastic Load Balancers

**Core Function:**
- Automatically distribute incoming application traffic across multiple EC2 instances
- Enable fault tolerance, high availability, and auto-scaling capabilities
- Use health checks to route traffic only to healthy instances

### Types of Load Balancers

#### 1. Application Load Balancer (ALB) ⭐ Most Important
- **Primary Use:** Request-level operations for web applications
- **Best For:** Microservices, containers, web services, websites
- **Key Features:** Advanced routing and visibility features
- **Exam Focus:** Most questions will be about ALBs

#### 2. Network Load Balancer (NLB)
- **Primary Use:** Ultra-high performance applications
- **Key Features:** 
  - TLS offloading at scale
  - Centralized certificate deployment
  - UDP support
  - Static IP addresses

#### 3. Gateway Load Balancer
- **Primary Use:** Deploy/manage third-party virtual appliances with GENEVE support
- **Exam Relevance:** Low probability of exam questions

#### 4. Classic Load Balancer (Deprecated)
- **Status:** Previous generation, Amazon discourages use
- **Exam Relevance:** Unlikely to appear on current exams

---

## ELB Stickiness (Session Affinity)

### What is Stickiness?

**Definition:** Routes requests to the same target within a target group to maintain session state

**Key Components:**
- **Target Group:** Collection of EC2 instances, Lambda functions, or other targets
- **Session Cookie:** Tracks which target serves a specific client

### When to Use Stickiness

**Ideal Scenarios:**
- Shopping cart applications
- Applications maintaining server-side session state
- Multi-step user journeys requiring state persistence

**Requirements:**
- Client/browser must support cookies
- Application maintains state information server-side

### How Stickiness Works

#### Without Stickiness:
- Requests distributed randomly across targets
- No session state maintained
- Each request may hit different servers

#### With Stickiness:
1. First request generates `AWS ALB` cookie
2. Cookie contains target information
3. Subsequent requests with cookie route to same target
4. Session state maintained throughout user journey

### Technical Implementation

#### Cookie Details:
- **Primary Cookie:** `AWS ALB`
- **CORS Cookie:** `AWS ALB CORS` (for cross-origin requests)
- **Security:** Contents encrypted with rotating keys
- **Modification:** Cannot decrypt or modify load balancer cookies

#### Configuration:
- Enable at **target group level**
- Set duration in **seconds**
- Duration resets with each request
- Session continues if client interacts before expiration

### CORS (Cross-Origin Resource Sharing) Considerations

**Special Requirements:**
- Some browsers need `SameSite=None; Secure` header setting
- ELB generates **two cookies**: `AWS ALB` and `AWS ALB CORS`
- Both cookies sent to clients in CORS environments

---

## Important Exam Points ⚠️

### ALB-Specific Rules:
- **Cookie Support:** Only load balancer-generated cookies
- **Cookie Encryption:** Uses rotating keys, cannot be modified
- **Cookie Header:** Uses `expires` attribute, NOT `Max-Age`
- **URL Encoding:** Does NOT support URL-encoded cookie values

### Multi-Layer Configurations:
- **Stickiness Layers:** Can only enable on ONE layer when using multiple ALBs
- **Reason:** All ALBs use same cookie names (`AWS ALB`, `AWS ALB CORS`)

### Forward Actions:
- **Multiple Target Groups:** If using forward action with multiple target groups where one+ has stickiness enabled, must enable target group stickiness

### WebSocket Connections:
- **Inherent Stickiness:** WebSockets are naturally sticky
- **Upgrade Process:** Target returning HTTP 101 status becomes the WebSocket target
- **Cookie Usage:** Cookie-based stickiness NOT used after WebSocket upgrade

---

## Exam Strategy & Key Takeaways

### High-Probability Exam Topics:
1. **When to use stickiness** (shopping carts, session state)
2. **ALB cookie names** (`AWS ALB`, `AWS ALB CORS`)
3. **Multi-layer ALB limitations**
4. **WebSocket behavior with stickiness**
5. **URL encoding incompatibility**

### Common Trick Questions:
- URL-encoded cookies with ALB stickiness (won't work)
- Multiple ALB layers with stickiness (only one layer)
- Classic Load Balancer questions (likely outdated)
- Cookie modification attempts (not possible)

### Remember for Exam:
- Focus on **Application Load Balancers** for stickiness questions
- Stickiness enables **session affinity** for stateful applications
- **Duration-based** with automatic renewal on client activity
- **Security-focused** with encrypted, unmodifiable cookies

---

## Lab Practice Points
- Create ALB with target group containing multiple EC2 instances
- Configure stickiness duration settings
- Test session persistence across requests
- Observe cookie behavior in browser developer tools
