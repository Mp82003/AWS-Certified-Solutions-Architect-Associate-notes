
# AWS Active Directory Services

## Overview
AWS Active Directory Services are used to store information and manage access to resources. Provides directory choices for accounts using existing Microsoft Active Directory or LDAP-aware applications in the cloud.

## Core Purpose
- Store user, group, and device information
- Manage access to AWS resources
- Provide single sign-on (SSO) capabilities
- Support existing Active Directory or LDAP applications

## Supported AWS Services Integration
- **AWS WorkSpaces**
- **WorkDocs**
- **Amazon Chime**
- **RDS for SQL Server**
- **AWS Management Console**
- **EC2 instances**
- **Amazon S3**

## Four Active Directory Service Options

### 1. AWS Directory Service for Microsoft Active Directory (AWS Managed Microsoft AD)

#### Features
- **Full Microsoft Active Directory** in AWS Cloud
- **Windows integrated SSO** experience
- **Standalone directory** or **extension of on-premises AD**
- **Active Directory trust relationships**
- **Native AD features** support

#### Supported Workloads
- Active Directory-aware workloads
- RDS for Microsoft SQL Server
- AWS managed services (WorkSpaces, QuickSight)
- Linux applications using LDAP

#### Key Capabilities
- **Group Managed Service Accounts (GMSA)**
- **Kerberos Constrained Delegation (KCD)**
- **Domain joining** for EC2 instances
- **AD administrative tools** support

#### Use Case Example
```
User Authentication Flow:
1. User logs in with AD identity
2. Authentication through AWS Managed Microsoft AD
3. .NET application connects to SQL Server using user credentials
4. KCD enables secure database access
5. GMSA manages service account credentials
```

#### When to Use
- Need actual AD features for AWS applications
- Windows workloads requiring AD
- RDS for Microsoft SQL Server
- Office 365 integration required
- LDAP directory for Linux applications

### 2. AD Connector

#### Features
- **Proxy service** connecting AWS to on-premises AD
- **No caching** - redirects requests to on-premises
- **Seamless domain join** for EC2 Windows instances
- **AWS Management Console** access with AD credentials

#### Architecture Flow
```
1. User enters AD credentials in AWS application
2. Authentication request sent via SSL to AD Connector
3. AD Connector performs LDAP authentication with on-premises AD
4. AD Connector performs IAM role mapping
5. Issues temporary credentials via STS AssumeRole
6. Constructs sign-in URL for console/application access
```

#### Key Benefits
- Uses existing on-premises directory
- No directory data stored in cloud
- Leverages existing AD infrastructure
- Cost-effective for existing AD environments

#### When to Use
- Existing on-premises directory
- Want to use compatible AWS services
- Need to keep directory data on-premises
- Extending on-premises AD to AWS

### 3. Simple AD

#### Features
- **Microsoft AD-compatible** directory
- **Standalone directory** in AWS Cloud
- **Basic AD features** only
- **Samba 4** Active Directory compatible server

#### Supported Features
- User accounts and group memberships
- Domain joining (Linux and Windows EC2)
- Kerberos-based SSO
- Group policies (basic)

#### Compatible AWS Services
- WorkSpaces
- WorkDocs
- QuickSight
- WorkMail
- AWS Management Console

#### Limitations
- **No trust relationships**
- **No advanced AD features**
- **Limited scalability**
- **Basic functionality only**

#### When to Use
- Need standalone directory in cloud
- Windows workloads with basic AD needs
- Linux workloads needing LDAP
- Cost-sensitive implementations
- Compatible AWS applications only

### 4. Cognito User Pools

#### Features
- **User directory** for mobile/web apps
- **Sign-up and sign-in** functionality
- **Federated identity** support
- **Fully managed** and **scalable**

#### Supported Identity Providers
- **Social providers**: Facebook, Google, Amazon, Apple
- **Enterprise providers**: SAML, OIDC
- **Direct sign-in**: Username/password

#### Key Capabilities
- Custom registration fields
- User profile management
- Multi-factor authentication (MFA)
- Password policies
- User migration
- Lambda triggers for customization

#### Authentication Flow
```
1. User authenticates via mobile/web app
2. Cognito User Pool validates credentials
3. Can federate to third-party IdP if configured
4. Returns JWT tokens for app access
5. Tokens used for API Gateway, Lambda access
```

#### When to Use
- Mobile or web applications
- Custom registration requirements
- Need to scale to millions of users
- Social identity integration
- Serverless applications
- Custom user attributes needed

## Comparison Matrix

| Feature | AWS Managed Microsoft AD | AD Connector | Simple AD | Cognito User Pools |
|---------|-------------------------|--------------|-----------|-------------------|
| **Type** | Full Microsoft AD | Proxy to on-premises | AD-compatible | User directory service |
| **Location** | AWS Cloud | On-premises + AWS | AWS Cloud | AWS Cloud |
| **Scalability** | High | Limited by on-premises | Low-Medium | Extremely High |
| **Cost** | High | Medium | Low | Pay per user |
| **AD Features** | Full | Full (via on-premises) | Basic | None |
| **Trust Relationships** | Yes | Yes | No | No |
| **Mobile/Web Apps** | Limited | Limited | Limited | Excellent |
| **Enterprise Integration** | Excellent | Excellent | Basic | Good |

## Decision Tree for Service Selection

### Choose AWS Managed Microsoft AD when:
- Need full Active Directory functionality
- Supporting Windows enterprise workloads
- Using RDS for SQL Server
- Require AD trusts or advanced features
- Need Office 365 integration

### Choose AD Connector when:
- Already have on-premises Active Directory
- Want to extend existing AD to AWS
- Need to keep directory data on-premises
- Cost optimization for existing AD investment

### Choose Simple AD when:
- Need basic directory services in cloud
- Supporting simple Windows workloads
- Linux applications requiring basic LDAP
- Budget-conscious implementations
- No complex AD features required

### Choose Cognito User Pools when:
- Building mobile or web applications
- Need social identity integration
- Require custom user attributes
- Expecting high user volume (millions)
- Building serverless applications

## Security Considerations

### Authentication Methods
- **Kerberos** authentication
- **LDAP** authentication  
- **SAML** federation
- **OAuth 2.0/OIDC**
- **Multi-factor authentication**

### Network Security
- **VPC integration** for all services
- **Security groups** and **NACLs**
- **TLS encryption** in transit
- **VPN/Direct Connect** for hybrid scenarios

### Access Control
- **IAM role mapping**
- **AD group membership**
- **Resource-based policies**
- **Cross-account access**

## Exam Tips

1. **Understand the four options** and their primary use cases
2. **Know the architecture patterns** for each service
3. **Identify hybrid vs cloud-native** scenarios
4. **Recognize cost optimization** opportunities
5. **Understand integration capabilities** with AWS services
6. **Know security implications** of each approach
7. **Practice scenario-based questions** for service selection

## Common Exam Scenarios

- **Migrating Windows workloads** → AWS Managed Microsoft AD
- **Existing on-premises AD** → AD Connector
- **Simple cloud directory needs** → Simple AD
- **Mobile app user management** → Cognito User Pools
- **Cost optimization** → Choose based on scale and features needed
